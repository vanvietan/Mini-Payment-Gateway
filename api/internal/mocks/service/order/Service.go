// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	mock "github.com/stretchr/testify/mock"
	"pg/api/internal/model"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, input
func (_m *Service) CreateOrder(ctx context.Context, input model.Order) (model.Order, error) {
	ret := _m.Called(ctx, input)

	var r0 model.Order
	if rf, ok := ret.Get(0).(func(context.Context, model.Order) model.Order); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Order) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrder provides a mock function with given fields: ctx, id
func (_m *Service) DeleteOrder(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrderByID provides a mock function with given fields: ctx, id
func (_m *Service) GetOrderByID(ctx context.Context, id int64) (model.Order, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Order
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.Order); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
