
version: '3.8'

# Define services
services:

  app:
    container_name: main
    env_file:
      - ./.env
    depends_on:
      - db
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      #      - "${APP_PORT}:${APP_PORT}"
      - '8000:8000'
  #    restart: on-failure
  #    volumes:
  #      - api:/usr/src/app/
    networks:
      - backend
  #db service
  db:
    container_name: db
    image: postgres:14.1-alpine
    #   restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_NAME}
      DATABASE_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    ports:
      #     - "${DB_PORT}:${POSTGRES_PORT}"
      - '5433:5432'
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - backend
  #       aliases:
  #         - database


  #migrate service
  migrate_up:
    image: migrate/migrate
    networks:
      - backend
    links:
      - db
    volumes:
       - ./api/data/migrations:/migration
    working_dir: /migration
    command: ["-path", "/migration", "-database",  "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB_NAME}?sslmode=disable", "up", "2"]
    depends_on:
      - db
#    restart: on-failure
  migrate_down:
    image: migrate/migrate
    networks:
      - backend
    links:
      - db
    volumes:
      - ./api/data/migrations:/migration
    working_dir: /migration
    command: ["-path", "/migration", "-database",  "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB_NAME}?sslmode=disable", "down", "2"]
    depends_on:
      - db

volumes:
  db:
    driver: local
networks:
  backend:
    driver: bridge